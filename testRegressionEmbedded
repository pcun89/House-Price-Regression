"""
test_regression_embedded.py

Unit tests for main_regression_embedded.py
Run with:
    pytest -v test_regression_embedded.py
"""

import os
import json
import joblib
import numpy as np
import pytest

import main_regression_embedded as mre


@pytest.fixture(scope="module")
def dataset():
    """Load a small dataset once for all tests."""
    X_df, y_series = mre.loadDataset()
    return X_df.head(200), y_series.head(200)  # use small subset for speed


def test_load_dataset(dataset):
    X_df, y_series = dataset
    assert not X_df.empty, "Feature DataFrame should not be empty"
    assert len(X_df) == len(y_series), "X and y must have equal number of samples"
    assert all(isinstance(c, str) for c in X_df.columns), "Feature names must be strings"


def test_split_data(dataset):
    X_df, y_series = dataset
    X_train, X_test, y_train, y_test, featureNames = mre.splitData(X_df, y_series, testSize=0.3)
    assert X_train.shape[1] == X_test.shape[1], "Train/test must have same number of features"
    assert len(featureNames) == X_train.shape[1], "Feature name count must match features"


def test_build_and_train_model(dataset):
    X_df, y_series = dataset
    X_train, X_test, y_train, y_test, featureNames = mre.splitData(X_df, y_series, testSize=0.3)
    pipeline, model, scaler = mre.buildAndTrainModel(X_train, y_train, alpha=1.0)

    # check fitted attributes
    assert hasattr(model, "coef_"), "Model must have coefficients"
    assert hasattr(scaler, "mean_"), "Scaler must have mean_ after fit"
    assert pipeline.named_steps["regressor"] == model, "Pipeline must include model"


def test_evaluate_model(dataset):
    X_df, y_series = dataset
    X_train, X_test, y_train, y_test, featureNames = mre.splitData(X_df, y_series, testSize=0.3)
    pipeline, model, scaler = mre.buildAndTrainModel(X_train, y_train, alpha=1.0)

    metrics = mre.evaluateModel(model, scaler, X_test, y_test)
    assert "rmse" in metrics and "r2" in metrics, "Metrics dict missing expected keys"
    assert metrics["rmse"] > 0, "RMSE must be positive"
    assert -1 <= metrics["r2"] <= 1, "R^2 must be in [-1, 1]"


def test_export_and_load_embedded_json(tmp_path, dataset):
    X_df, y_series = dataset
    X_train, X_test, y_train, y_test, featureNames = mre.splitData(X_df, y_series)
    pipeline, model, scaler = mre.buildAndTrainModel(X_train, y_train)

    out_json = tmp_path / "embedded_model.json"
    mre.exportForEmbedded(scaler, model, featureNames, outPath=str(out_json))
    assert out_json.exists(), "JSON export file must exist"

    with open(out_json, "r") as f:
        data = json.load(f)

    expected_keys = {"feature_names", "means", "scales", "coefficients", "intercept"}
    assert expected_keys.issubset(data.keys()), f"Missing keys in export JSON: {data.keys()}"
    assert len(data["coefficients"]) == len(featureNames), "Coefficient count must match features"


def test_save_pipeline(tmp_path, dataset):
    X_df, y_series = dataset
    X_train, X_test, y_train, y_test, featureNames = mre.splitData(X_df, y_series)
    pipeline, model, scaler = mre.buildAndTrainModel(X_train, y_train)

    out_model = tmp_path / "reg_pipeline.joblib"
    mre.savePipeline(pipeline, outPath=str(out_model))
    assert out_model.exists(), "Joblib pipeline file must exist"

    loaded = joblib.load(out_model)
    assert hasattr(loaded, "predict"), "Loaded pipeline must have predict()"
